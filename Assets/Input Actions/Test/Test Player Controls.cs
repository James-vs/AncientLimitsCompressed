//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/Test/Test Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestPlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestPlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Test Player Controls"",
    ""maps"": [
        {
            ""name"": ""GameplayController"",
            ""id"": ""b44f9372-2b91-400e-8d37-d1c2f6dd331b"",
            ""actions"": [
                {
                    ""name"": ""Grow"",
                    ""type"": ""Button"",
                    ""id"": ""0f5f92c7-7380-4c93-9f7a-3c1658ebc533"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d8fac15c-0cbb-4535-a2ff-710f7e336ec4"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""69967224-006f-4837-9fb1-8d47b7859935"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b13ffd06-9c6b-4491-8930-46fa75f287ed"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ad0d5930-7ad0-41d0-9544-0deab4da30c7"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53ec68a9-83aa-4790-b56b-acdd3dcb291e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16f99c67-f5cc-467c-a29a-fe74a3dd93e2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d92d3237-d227-4b0d-bc36-8550ce5dc9be"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayController
        m_GameplayController = asset.FindActionMap("GameplayController", throwIfNotFound: true);
        m_GameplayController_Grow = m_GameplayController.FindAction("Grow", throwIfNotFound: true);
        m_GameplayController_Move = m_GameplayController.FindAction("Move", throwIfNotFound: true);
        m_GameplayController_Jump = m_GameplayController.FindAction("Jump", throwIfNotFound: true);
        m_GameplayController_Look = m_GameplayController.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayController
    private readonly InputActionMap m_GameplayController;
    private List<IGameplayControllerActions> m_GameplayControllerActionsCallbackInterfaces = new List<IGameplayControllerActions>();
    private readonly InputAction m_GameplayController_Grow;
    private readonly InputAction m_GameplayController_Move;
    private readonly InputAction m_GameplayController_Jump;
    private readonly InputAction m_GameplayController_Look;
    public struct GameplayControllerActions
    {
        private @TestPlayerControls m_Wrapper;
        public GameplayControllerActions(@TestPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grow => m_Wrapper.m_GameplayController_Grow;
        public InputAction @Move => m_Wrapper.m_GameplayController_Move;
        public InputAction @Jump => m_Wrapper.m_GameplayController_Jump;
        public InputAction @Look => m_Wrapper.m_GameplayController_Look;
        public InputActionMap Get() { return m_Wrapper.m_GameplayController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayControllerActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayControllerActionsCallbackInterfaces.Add(instance);
            @Grow.started += instance.OnGrow;
            @Grow.performed += instance.OnGrow;
            @Grow.canceled += instance.OnGrow;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IGameplayControllerActions instance)
        {
            @Grow.started -= instance.OnGrow;
            @Grow.performed -= instance.OnGrow;
            @Grow.canceled -= instance.OnGrow;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IGameplayControllerActions instance)
        {
            if (m_Wrapper.m_GameplayControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayControllerActions @GameplayController => new GameplayControllerActions(this);
    public interface IGameplayControllerActions
    {
        void OnGrow(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
